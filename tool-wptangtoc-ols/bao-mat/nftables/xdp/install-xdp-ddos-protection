#!/bin/bash

OUTPUT=$(cat /etc/*release)
if echo $OUTPUT | grep -q "AlmaLinux 8\|Rocky Linux 8\|Red Hat Enterprise Linux 8\|Oracle Linux Server 8"; then
  KERNEL_MAJOR_VERSION=$(uname -r | cut -f1 -d '.')
  # So s√°nh s·ªë h·ªçc: n·∫øu phi√™n b·∫£n nh·ªè h∆°n 5
  if [[ "$KERNEL_MAJOR_VERSION" -lt 5 ]]; then
    # sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
    # sudo dnf install https://www.elrepo.org/elrepo-release-8.el8.elrepo.noarch.rpm -y
    sudo dnf install elrepo-release -y
    dnf clean all
    sudo dnf --enablerepo=elrepo-kernel install kernel-lt -y
    # C√†i ƒë·∫∑t g√≥i devel cho kernel-lt n√≥i chung
    sudo dnf --enablerepo=elrepo-kernel install kernel-lt-devel -y
    sudo grub2-mkconfig -o /boot/grub2/grub.cfg
    sudo grub2-set-default 0
    # upgrade_kernel_linux_wptt='11'
    # echo "Ho√†n t·∫•t upgrade kernel, v√† ti·∫øp t·ª•c install l·∫°i"
    echo "/etc/wptt/bao-mat/nftables/xdp/install-xdp-ddos-protection"
    /sbin/reboot
  fi
fi

check_xdp_action=$(ip a | grep 'xdp')
if [[ $check_xdp_action ]]; then
  echo "ƒë√£ k√≠ch ho·∫°t"
  exit
fi

. /etc/wptt/tenmien
echo ""
echo ""
echo "L·ª±a ch·ªçn tri·ªÉn khai ddos xdp block log:"
echo ""
lua_chon_NAME
. /etc/wptt/echo-color
if [[ "$NAME" = "0" || "$NAME" = "" ]]; then
  . /etc/wptt/wptt-wordpress-main 1
fi

pathcheck="/etc/wptt/vhost/.$NAME.conf"
if [[ ! -f "$pathcheck" ]]; then
  clear
  echoDo "T√™n mi·ªÅn kh√¥ng t·ªìn t·∫°i tr√™n h·ªá th·ªëng n√†y"
  sleep 3
  . /etc/wptt/wptt-wordpress-main 1
  exit
fi

dnf install jq -y
sudo dnf groupinstall -y "Development Tools"
sudo dnf config-manager --set-enabled powertools
sudo dnf install -y clang llvm iproute bpftool elfutils-libelf-devel

dnf install kernel-devel-$(uname -r) -y #n·∫øu c√≥ lt th√¨ th√¥i ch·∫°y cho c√≥

sudo dnf install libbpf-devel -y

if [[ -f /etc/systemd/system/ddos-blocker-nftables.service ]]; then #xo√° mode nftables tr√°nh xdp xung ƒë·ªôt
  systemctl stop ddos-blocker-nftables
  systemctl disable ddos-blocker-nftables
  rm -f /etc/systemd/system/ddos-blocker-nftables.service
fi

if [[ ! -f /etc/systemd/system/ddos-blocker-xdp.service ]]; then
  mkdir -p /usr/local/lsws/$NAME/bao-mat
  cp -f /etc/wptt/bao-mat/nftables/xdp/log-xdp-anti.c /usr/local/lsws/$NAME/bao-mat/anti.c
  cd /usr/local/lsws/$NAME/bao-mat
  rm -f anti
  gcc -o anti anti.c -lbpf
  # ip=$(curl -skf --connect-timeout 5 --max-time 10 https://ipv4.icanhazip.com | grep -E -o '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' || curl -skf --connect-timeout 5 --max-time 10 https://checkip.amazonaws.com | grep -E -o '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)')

  # sed -i "/whitelistIPs =/a \"$ip\"," /usr/local/lsws/$NAME/bao-mat/anti.go
  # chmod +x /usr/local/lsws/$NAME/bao-mat/anti.go
  # cd /usr/local/lsws/$NAME/bao-mat
  # go mod init lsws-watcher
  # go get github.com/cilium/ebpf
  # go build anti.go && chmod +x anti
  rm -f /usr/local/bin/anti
  mv /usr/local/lsws/$NAME/bao-mat/anti /usr/local/bin/
  chmod +x /usr/local/bin/anti
  # rm -rf /usr/local/lsws/$NAME/bao-mat
  echo '#!/bin/bash

LOG_FILE="/usr/local/lsws/logs/error.log"
BLOCKER_APP="/usr/local/bin/anti"

# Ch·∫°y l·ªánh tail -F v√† pipe output v√†o ch∆∞∆°ng tr√¨nh blocker
tail -F -n 0 "$LOG_FILE" | "$BLOCKER_APP"' >/usr/local/bin/start_blocker.sh
  chmod +x /usr/local/bin/start_blocker.sh
  echo '
[Unit]
Description=XDP Log Blocker Service
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/start_blocker.sh
Restart=on-failure

[Install]
WantedBy=multi-user.target
' >/etc/systemd/system/ddos-blocker-xdp.service
  setenforce 0
  sed -i 's/=enforcing/=disabled/g' /etc/selinux/config
  systemctl daemon-reload
  systemctl start ddos-blocker-xdp
  systemctl enable ddos-blocker-xdp
fi

rm -f xdp_ddos_protection.o
cd /etc/wptt/bao-mat/nftables/xdp
# # ƒê∆∞·ªùng d·∫´n c·∫ßn ki·ªÉm tra v√† mount
# BPF_FS_PATH="/sys/fs/bpf"

# # Ki·ªÉm tra xem BPF filesystem ƒë√£ ƒë∆∞·ª£c mount hay ch∆∞a
# # grep -q s·∫Ω kh√¥ng in ra output, ch·ªâ tr·∫£ v·ªÅ m√£ tho√°t (exit code)
# if ! mount | grep -q "${BPF_FS_PATH}"; then
#   # N·∫øu ch∆∞a ƒë∆∞·ª£c mount (l·ªánh grep th·∫•t b·∫°i)
#   echo "[!] BPF filesystem ch∆∞a ƒë∆∞·ª£c mount. ƒêang ti·∫øn h√†nh mount..."
#   # Th·ª±c hi·ªán mount
#   sudo mount -t bpf bpf "${BPF_FS_PATH}"
#   if [ $? -eq 0 ]; then
#     echo "[+] ƒê√£ mount th√†nh c√¥ng BPF filesystem t·∫°i ${BPF_FS_PATH}"
#   else
#     echo "[!] L·ªói: Kh√¥ng th·ªÉ mount BPF filesystem. Vui l√≤ng ki·ªÉm tra l·∫°i."
#     exit 1
#   fi
# else
#   # N·∫øu ƒë√£ ƒë∆∞·ª£c mount r·ªìi
#   echo "[*] BPF filesystem ƒë√£ ƒë∆∞·ª£c mount s·∫µn. B·ªè qua."
# fi

# ...
# ƒê·∫∑t c√°c l·ªánh bpftool v√† c√°c l·ªánh kh√°c c·ªßa b·∫°n ·ªü ƒë√¢y
# ...

port_checkssh=$(cat /etc/ssh/sshd_config | grep "Port " | grep -o '[0-9]\+$' || echo 22) #port ssh config
clang -O2 -g -target bpf -c xdp_ddos_protection.c -o xdp_ddos_protection.o

# B∆∞·ªõc 2: D·ªçn d·∫πp m√¥i tr∆∞·ªùng c≈© m·ªôt c√°ch tri·ªát ƒë·ªÉ
sudo bpftool net detach xdp dev eth0 || true
sudo rm -f /sys/fs/bpf/xdp_ddos_protection_prog
sudo rm -f /sys/fs/bpf/log_blacklist

# B∆∞·ªõc 3: Ch·ªâ T·∫¢I ch∆∞∆°ng tr√¨nh v√† c√°c map c·ªßa n√≥ v√†o kernel
# ·ªû b∆∞·ªõc n√†y, map ch∆∞a ƒë∆∞·ª£c pin.
sudo bpftool prog load xdp_ddos_protection.o /sys/fs/bpf/xdp_ddos_protection_prog

# B∆∞·ªõc 4: T√¨m ID c·ªßa map v√† PIN n√≥ ra file
# ƒê√¢y l√† b∆∞·ªõc quan tr·ªçng ƒë·ªÉ script Go c√≥ th·ªÉ th·∫•y map.
MAP_ID=$(sudo bpftool map list | grep log_blacklist | awk '{print $1}' | sed 's/://')
sudo bpftool map pin id $MAP_ID /sys/fs/bpf/log_blacklist
sudo bpftool net attach xdp pinned /sys/fs/bpf/xdp_ddos_protection_prog dev eth0

sudo bpftool net list dev eth0

#bypass danh s√°ch tr·∫Øng
ip=$(curl -skf --connect-timeout 5 --max-time 10 https://ipv4.icanhazip.com | grep -E -o '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' || curl -skf --connect-timeout 5 --max-time 10 https://checkip.amazonaws.com | grep -E -o '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)')
/etc/wptt/bao-mat/nftables/xdp/bypass-ip.sh $ip
/etc/wptt/bao-mat/nftables/xdp/bypass-ip.sh '103.106.105.75'

. /etc/wptt/logs/error-chuyen-warn-log-server

systemctl restart ddos-blocker-xdp

#upgrade kernel ph·∫£i t·ª´ 5x m·ªõi ch·∫°y ƒë∆∞·ª£c xdp
#install xdp
dnf install golang -y

cd /etc/wptt/bao-mat/nftables/xdp
go mod init map-xdp
go get github.com/cilium/ebpf
go build cleanup_maps.go
chmod +x cleanup_maps
mkdir -p /etc/xdp-protection
mv cleanup_maps /etc/xdp-protection
cat <(crontab -l) | sed "/cleanup_maps/d" | crontab -
# cat <(crontab -l) <(echo '*/5 * * * * /root/cleanup_maps >/dev/null 2>&1') | crontab -
cat <(crontab -l) <(echo '*/5 * * * * /etc/xdp-protection/cleanup_maps > /var/log/bpf_cleanup.log 2>&1') | crontab -

if $(cat /etc/*release | grep -q "Ubuntu"); then
  systemctl restart cron
else
  systemctl restart crond
fi

MAP_NAMES_TO_PIN=("log_blacklist" "rl_blacklist")
# --- H√†m x·ª≠ l√Ω ch√≠nh ---
# H√†m n√†y nh·∫≠n t√™n map, t√¨m ID c·ªßa n√≥ v√† ghim n·∫øu c·∫ßn.
pin_map_if_needed() {
  local map_name=$1
  local pin_path="/sys/fs/bpf/${map_name}"

  echo "--- ƒêang x·ª≠ l√Ω map: ${map_name} ---"

  # 1. Ki·ªÉm tra xem map ƒë√£ ƒë∆∞·ª£c ghim hay ch∆∞a
  if [ -f "${pin_path}" ]; then
    echo "‚úÖ Map '${map_name}' ƒë√£ ƒë∆∞·ª£c ghim t·∫°i ${pin_path}. B·ªè qua."
    return 0
  fi

  echo "‚ÑπÔ∏è Map '${map_name}' ch∆∞a ƒë∆∞·ª£c ghim. ƒêang t√¨m ID..."

  # 2. T√¨m ID c·ªßa map t·ª´ bpftool
  # L·ªánh `bpftool map show` s·∫Ω li·ªát k√™ t·∫•t c·∫£ map.
  # `grep "name ${map_name}"` s·∫Ω l·ªçc ra d√≤ng ch·ª©a map c·ªßa ch√∫ng ta.
  # `awk -F: '{print $1}'` s·∫Ω l·∫•y ph·∫ßn ƒë·∫ßu ti√™n tr∆∞·ªõc d·∫•u hai ch·∫•m (:), ch√≠nh l√† ID.
  map_id=$(bpftool map show | grep "name ${map_name}" | awk -F: '{print $1}')

  # 3. Ki·ªÉm tra xem c√≥ t√¨m th·∫•y ID kh√¥ng
  if [ -z "${map_id}" ]; then
    echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y map n√†o c√≥ t√™n '${map_name}' ƒëang ch·∫°y. H√£y ch·∫Øc ch·∫Øn ch∆∞∆°ng tr√¨nh XDP ƒë√£ ƒë∆∞·ª£c n·∫°p."
    return 1
  fi

  echo "üëç ƒê√£ t√¨m th·∫•y ID c·ªßa map '${map_name}': ${map_id}"

  # 4. Th·ª±c hi·ªán ghim map
  echo "üìå ƒêang th·ª±c hi·ªán ghim map..."
  bpftool map pin id "${map_id}" "${pin_path}"

  # Ki·ªÉm tra l·∫°i l·∫ßn n·ªØa ƒë·ªÉ ch·∫Øc ch·∫Øn th√†nh c√¥ng
  if [ $? -eq 0 ]; then
    echo "‚úÖ Ghim th√†nh c√¥ng map '${map_name}' v√†o ${pin_path}."
  else
    echo "‚ùå L·ªói: Kh√¥ng th·ªÉ ghim map '${map_name}'. Vui l√≤ng ki·ªÉm tra l·∫°i."
    return 1
  fi
}

# --- ƒêi·ªÉm b·∫Øt ƒë·∫ßu c·ªßa script ---
# Ki·ªÉm tra quy·ªÅn root
if [ "$EUID" -ne 0 ]; then
  echo "L·ªói: Vui l√≤ng ch·∫°y script n√†y v·ªõi quy·ªÅn root (sudo)."
  exit 1
fi

# V√≤ng l·∫∑p qua danh s√°ch c√°c map c·∫ßn ghim
for map_name in "${MAP_NAMES_TO_PIN[@]}"; do
  pin_map_if_needed "${map_name}"
  echo # In m·ªôt d√≤ng tr·ªëng ƒë·ªÉ d·ªÖ ƒë·ªçc
done

echo '[Unit]
Description=Load XDP DDoS Protection Program at Boot
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
RemainAfterExit=yes

ExecStartPre=/bin/mkdir -p /sys/fs/bpf
ExecStartPre=/bin/mount -t bpf bpf /sys/fs/bpf

# L·ªánh 1: N·∫°p ch∆∞∆°ng tr√¨nh. V·∫´n gi·ªØ nguy√™n.
ExecStart=/usr/sbin/bpftool prog load /etc/wptt/bao-mat/nftables/xdp/xdp_ddos_protection.o /sys/fs/bpf/xdp_ddos_prog

# L·ªánh 2 (M·ªõi): Lu√¥n g·ª° ch∆∞∆°ng tr√¨nh c≈© tr∆∞·ªõc. "|| true" ƒë·ªÉ l·ªánh kh√¥ng b√°o l·ªói n·∫øu kh√¥ng c√≥ g√¨ ƒë·ªÉ g·ª°.
ExecStart=/usr/sbin/bpftool net detach xdp dev eth0 || true

# L·ªánh 3 (C≈©): G·∫Øn ch∆∞∆°ng tr√¨nh m·ªõi.
ExecStart=/usr/sbin/bpftool net attach xdp pinned /sys/fs/bpf/xdp_ddos_prog dev eth0

# D·∫•u "-" ·ªü ƒë·∫ßu s·∫Ω b√°o cho systemd b·ªè qua l·ªói n·∫øu l·ªánh n√†y th·∫•t b·∫°i (v√≠ d·ª• khi XDP ƒë√£ b·ªã g·ª°).
ExecStop=-/usr/sbin/bpftool net detach xdp dev eth0

[Install]
WantedBy=multi-user.target
' >/etc/systemd/system/load-xdp.service
systemctl daemon-reload
sudo systemctl enable load-xdp.service
# B·∫°n c√≥ th·ªÉ ch·∫°y th·ª≠ ngay l·∫≠p t·ª©c m√† kh√¥ng c·∫ßn reboot
sudo systemctl start load-xdp.service

echo "Ho√†n t·∫•t install xdp"
# if [[ $upgrade_kernel_linux_wptt ]]; then
#   echo "Reboot l·∫°i m√°y ch·ªß upgrade kernel"
#   /sbin/reboot
# fi
# S·∫Ω b√°o l·ªói n·∫øu kh√¥ng c√≥ g√¨ ƒëang ch·∫°y, ƒëi·ªÅu n√†y l√† b√¨nh th∆∞·ªùng.
# ip link set dev eth0 xdp obj xdp_ddos_protection.o sec xdp
# check=$(ip link show eth0 | grep 'xdp')
# if [[ $check ]]; then
#   echo "Ho√†n t·∫•t"
# else
#   echo "kh√¥ng th√†nh c√¥ng"
# fi
