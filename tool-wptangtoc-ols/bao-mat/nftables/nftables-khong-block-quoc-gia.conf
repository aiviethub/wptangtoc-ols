table inet filter {
	chain input {
		type filter hook input priority filter; policy drop;
		iifname "lo" accept
		ct state invalid drop
		ct state established,related accept
		tcp flags != syn ct state new drop #kết nối mới phải lúc đầu phải syn
		tcp flags & (fin|syn) == (fin|syn) drop #tcp yêu cầu và kết thúc tcp không thể xảy ra 1 lúc thì drop
        tcp flags & (syn|rst) == (syn|rst) drop #yêu cầu và ngắt trong 1 tcp không thể xảy ra 1 lúc khi hợp lệ thì drop
        tcp flags & (fin|syn|rst|psh|ack|urg) < (fin) drop # == 0 would be better, not supported yet. null packet
        tcp flags & (fin|syn|rst|psh|ack|urg) == (fin|psh|urg) drop #call 6 phương thức tcp cùng lúc nhưng chỉ hoạt động kết thúc và tiên yêu cầu không thể cùng 1 lúc
		tcp flags & (fin|syn|rst|psh|ack|urg) == 0 drop #null packet drop
		ip frag-off & 0x1fff != 0x0 drop #xoá gói dữ liệu bị phân mảnh
		ip protocol udp limit rate 3200/second drop #udp flood bao mat
		tcp dport { 80, 443 } ct state new accept
	}

	chain forward {
		type filter hook forward priority filter; policy drop;
	}

	chain output {
		type filter hook output priority filter; policy accept;
	}
}
table ip blackblock {
	set blackaction {
		type ipv4_addr
			flags interval,timeout
			comment "Drop all packets from these IPs"
			elements = {0.0.0.0}
	}

	chain blackblock-chain-input {
		type filter hook input priority filter - 10; policy accept;
		ip saddr @blackaction counter drop
	}
}

table ip httpdGuard {
        set httpdlist {
                type ipv4_addr
                size 65535
                flags dynamic,timeout
                timeout 1m
        }
        set denylist {
                type ipv4_addr
                size 65535
                flags dynamic,timeout
                timeout 30m
        }

        chain input {
                type filter hook input priority filter; policy accept;

                # Allow established and related connections immediately
                ct state established,related accept

                # Early drop for known attackers on the denylist
                ip saddr @denylist drop

                # Limit new connections per IP to mitigate connection floods 40/second burst 50 packets: 30 yêu cầu, hãy điều chỉnh lại cho phù hợp với thực tế
                tcp dport { 80, 443 } ct state new limit rate 40/second burst 50 packets add @httpdlist { ip saddr } counter packets 0 bytes 0 accept

                # If connection rate exceeds limit, add to denylist
                tcp dport { 80, 443 } ct state new ip saddr @httpdlist add @denylist { ip saddr }

                # Default rule: accept other traffic (adjust as needed)
        }
}
