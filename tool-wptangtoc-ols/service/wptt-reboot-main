#!/bin/bash
# @author: Gia Tuấn
# @website: https://wptangtoc.com
# @email: giatuan@wptangtoc.com
# @since: 2024

# --- Khởi tạo và tải cấu hình ---
# Tải cấu hình chính
if [[ -f "/etc/wptt/.wptt.conf" ]]; then
    . "/etc/wptt/.wptt.conf"
else
    # Gán ngôn ngữ mặc định nếu không có file config
    ngon_ngu='vi'
    echo "Cảnh báo: Không tìm thấy tệp cấu hình /etc/wptt/.wptt.conf. Sử dụng ngôn ngữ mặc định 'vi'."
    # Không thể tiếp tục nếu không có cấu hình ngôn ngữ, cần có các biến mặc định
    # exit 1; # Có thể thoát nếu cấu hình là bắt buộc
fi

# Xác định và tải file ngôn ngữ
if [[ -z "$ngon_ngu" ]]; then # Kiểm tra chuỗi rỗng an toàn hơn
    ngon_ngu='vi'
fi
lang_file="/etc/wptt/lang/${ngon_ngu}.sh"
if [[ -f "$lang_file" ]]; then
    . "$lang_file"
else
    echo "Cảnh báo: Không tìm thấy tệp ngôn ngữ '$lang_file'. Sử dụng tiếng Việt mặc định."
    # Cố gắng tải tiếng Việt nếu có
    if [[ -f "/etc/wptt/lang/vi.sh" ]]; then
        . "/etc/wptt/lang/vi.sh"
    else
        echo "Lỗi: Không tìm thấy cả tệp ngôn ngữ mặc định /etc/wptt/lang/vi.sh"
    fi
fi

# --- Gán giá trị mặc định cho các biến (quan trọng nếu file lang thiếu) ---
quan_ly_reboot_service=${quan_ly_reboot_service:-"Quản lý Reboot Service"}
khoi_dong_lai_litespeed_webserver=${khoi_dong_lai_litespeed_webserver:-"Khởi động lại LiteSpeed-Webserver"}
khoi_dong_lai_maria_database=${khoi_dong_lai_maria_database:-"Khởi động lại Maria-Database"}
khoi_dong_lai_fail2ban=${khoi_dong_lai_fail2ban:-"Khởi động lại Fail2ban"}
khoi_dong_lai_all_service=${khoi_dong_lai_all_service:-"Khởi động lại ALL-service"}
khoi_dong_lai_may_chu=${khoi_dong_lai_may_chu:-"Khởi động lại máy chủ"}
khoi_dong_lai_lsmemcached=${khoi_dong_lai_lsmemcached:-"Khởi động lại LSMemcached"}
khoi_dong_lai_redis=${khoi_dong_lai_redis:-"Khởi động lại Redis"}
khoi_dong_lai_memcached=${khoi_dong_lai_memcached:-"Khởi động lại Memcached"}
khoi_dong_lai_csf=${khoi_dong_lai_csf:-"Khởi động lại CSF"}
khoi_dong_lai_nftables=${khoi_dong_lai_nftables:-"Khởi động lại Nftables"}
khoi_dong_lai_firewalld=${khoi_dong_lai_firewalld:-"Khởi động lại Firewalld"}
tinh_trang_hoat_dong_cac_service_hien_tai=${tinh_trang_hoat_dong_cac_service_hien_tai:-"Tình trạng hoạt động các service hiện tại"}
nhap_lua_chon_cua_ban=${nhap_lua_chon_cua_ban:-"Nhập lựa chọn của bạn"}
chon_nhanh=${chon_nhanh:-"Chọn nhanh"}
exit_thoat=${exit_thoat:-"Thoát"}
lua_chon_khong_hop_le=${lua_chon_khong_hop_le:-"Lựa chọn không hợp lệ"}
vui_long_chon_lai=${vui_long_chon_lai:-"Vui lòng chọn lại"}
#-----------------------------------------------------

# Hàm get_status đơn giản hóa việc lấy trạng thái
get_status() {
    local service_name=$1
    # Kiểm tra systemctl tồn tại
    if ! command -v systemctl &>/dev/null; then
        echo "no-systemctl"
        return
    fi
    # Lấy trạng thái
    systemctl status "${service_name}.service" 2>/dev/null | grep 'Active:' | cut -f2 -d':' | xargs | cut -f1 -d' ' | xargs || echo "not-found"
}

# --- Hiển thị header và trạng thái (nếu không có tham số) ---
if [[ $1 = "" ]];then
    if [[ -x "/etc/wptt/wptt-header-menu" ]]; then
        . /etc/wptt/wptt-header-menu
        header_menu
    else
         echo "Lỗi: Không tìm thấy /etc/wptt/wptt-header-menu"
    fi
    # In bảng trạng thái với định dạng cố định chiều rộng
    echo "+-----------------------------------------------------------------------+"
    # Sử dụng printf để căn chỉnh và đảm bảo độ dài, cắt bớt nếu quá dài
    printf "| %-69s |\n" "$tinh_trang_hoat_dong_cac_service_hien_tai"
    echo "+-----------------------------------------------------------------------+"
    printf "| %-13s : %-50.50s |\n" "LiteSpeed" "$(get_status lshttpd)" # Giữ lshttpd như gốc để hiển thị
    printf "| %-13s : %-50.50s |\n" "MariaDB" "$(get_status mariadb)"
    if [[ -f /etc/sysconfig/memcached ]];then
        printf "| %-13s : %-50.50s |\n" "Memcached" "$(get_status memcached)"
    fi
    if [[ -d /usr/local/lsmcd ]];then
         printf "| %-13s : %-50.50s |\n" "LSMemcached" "$(get_status lsmcd)"
    fi
    if [[ -f /etc/redis.conf ]];then
         printf "| %-13s : %-50.50s |\n" "Redis" "$(get_status redis)"
    fi
    printf "| %-13s : %-50.50s |\n" "SSH" "$(get_status sshd)"
    printf "| %-13s : %-50.50s |\n" "Crond" "$(get_status crond)"
    printf "| %-13s : %-50.50s |\n" "Fail2Ban" "$(get_status fail2ban)"
    if command -v csf &> /dev/null; then
         printf "| %-13s : %-50.50s |\n" "CSF (LFD)" "$(get_status lfd)"
    fi
    if systemctl list-units --full -all | grep -q 'firewalld.service'; then
         printf "| %-13s : %-50.50s |\n" "Firewalld" "$(get_status firewalld)"
    fi
    if systemctl list-units --full -all | grep -q 'nftables.service'; then
         printf "| %-13s : %-50.50s |\n" "Nftables" "$(get_status nftables)"
    fi
    echo "+-----------------------------------------------------------------------+"

else
    # Tải echo-color nếu có tham số
    if [[ -x "/etc/wptt/echo-color" ]]; then
        . /etc/wptt/echo-color
        echoDo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
    else
         echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=" # Dự phòng
    fi
fi

# --- Định nghĩa Hàm Hành Động và Menu Động ---

# Hàm thực thi hành động dựa trên index (cho menu Reboot Service)
# Hàm này ánh xạ index dựa trên thứ tự TỐI ĐA các tùy chọn có thể có.
run_action() {
    local index=$1
    local service_name=""
    local action_desc="" # Mô tả hành động

    # Ánh xạ index dựa trên thứ tự tối đa CÓ THỂ có
    # Thứ tự: lsws, mariadb, fail2ban, ALL, Reboot, lsmcd, redis, memcached, csf, nftables, firewalld
    case $index in
         0) service_name="lshttpd"; action_desc="${khoi_dong_lai_litespeed_webserver}" ;; # Hoặc lshttpd
         1) service_name="mariadb"; action_desc="${khoi_dong_lai_maria_database}" ;;
         2) service_name="fail2ban"; action_desc="${khoi_dong_lai_fail2ban}" ;;
         3) action_desc="${khoi_dong_lai_all_service}" ;; # Xử lý đặc biệt
         4) action_desc="${khoi_dong_lai_may_chu}" ;;    # Xử lý đặc biệt
         5) service_name="lsmcd"; action_desc="${khoi_dong_lai_lsmemcached}" ;;
         6) service_name="redis"; action_desc="${khoi_dong_lai_redis}" ;;
         7) service_name="memcached"; action_desc="${khoi_dong_lai_memcached}" ;;
         8) action_desc="${khoi_dong_lai_csf}" ;;       # Xử lý đặc biệt
         9) service_name="nftables"; action_desc="${khoi_dong_lai_nftables}" ;;
        10) service_name="firewalld"; action_desc="${khoi_dong_lai_firewalld}" ;;
        *) echo "${lua_chon_khong_hop_le:-Lựa chọn không hợp lệ}: Index $index."; return 1 ;;
    esac

    # Sử dụng action_desc đã lấy từ case hoặc biến ngôn ngữ
    echo "Đang thực hiện: ${action_desc}..."
    echo "-------------------------------------------------------------------------"

    # --- Thực thi hành động ---
    if [[ $index -eq 3 ]]; then # Reboot ALL
        echo "Khởi động lại LiteSpeed..."
        systemctl restart lshttpd.service # Hoặc lshttpd
        echo "Khởi động lại MariaDB..."
        systemctl restart mariadb.service
        echo "Khởi động lại Fail2Ban..."
        systemctl restart fail2ban.service

        # Khởi động lại các dịch vụ tùy chọn (phi firewall) nếu chúng tồn tại
        if systemctl list-units --full -all | grep -q 'lsmcd.service'; then
             echo "Khởi động lại LSMemcached..."
             systemctl restart lsmcd.service
        fi
         if systemctl list-units --full -all | grep -q 'redis.service'; then
             echo "Khởi động lại Redis..."
             systemctl restart redis.service
        fi
         if systemctl list-units --full -all | grep -q 'memcached.service'; then
             echo "Khởi động lại Memcached..."
             systemctl restart memcached.service
        fi

        # Khởi động lại dịch vụ Firewall đang hoạt động (ưu tiên CSF > firewalld > nftables)
        if command -v csf &> /dev/null && systemctl is-active lfd.service &>/dev/null; then
             echo "Khởi động lại CSF & LFD (đang hoạt động)..."
             csf -r &> /dev/null
             systemctl restart lfd.service
        fi

        if systemctl is-active firewalld.service &>/dev/null; then
             echo "Khởi động lại Firewalld (đang hoạt động)..."
             systemctl restart firewalld.service
        fi

        if systemctl is-active nftables.service &>/dev/null; then
            echo "Khởi động lại Nftables (đang hoạt động)..."
            systemctl restart nftables.service
        fi

        echo "Hoàn thành khởi động lại các dịch vụ."

    elif [[ $index -eq 4 ]]; then # Reboot Server
        read -p "!!! BẠN CÓ CHẮC CHẮN MUỐN KHỞI ĐỘNG LẠI TOÀN BỘ MÁY CHỦ? (yes/no): " confirm
        if [[ "$confirm" == "yes" ]]; then
            echo "Đang khởi động lại máy chủ..."
            # Có thể thêm sync để đảm bảo dữ liệu được ghi trước khi reboot
            # sync; sync; sync;
            /sbin/reboot # Sử dụng đường dẫn đầy đủ để an toàn hơn
        else
            echo "Đã hủy khởi động lại máy chủ."
        fi

    elif [[ $index -eq 8 ]]; then # Reboot CSF
         if command -v csf &> /dev/null; then
             echo "Khởi động lại CSF & LFD..."
             csf -r &> /dev/null
             systemctl restart lfd.service
             echo "Hoàn thành khởi động lại CSF."
             sleep 1
             local lfd_status=$(systemctl is-active lfd.service 2>/dev/null)
             echo "Trạng thái LFD hiện tại: ${lfd_status:-Không xác định}"
         else
             echo "Lỗi: CSF dường như chưa được cài đặt."
         fi

    elif [[ -n "$service_name" ]]; then # Reboot dịch vụ cụ thể
         if systemctl list-units --full -all | grep -q "${service_name}.service"; then
             systemctl restart "${service_name}.service"
             echo "Hoàn thành khởi động lại ${action_desc}."
             sleep 1
             local current_status=$(systemctl is-active "${service_name}.service" 2>/dev/null)
             echo "Trạng thái ${action_desc} hiện tại: ${current_status:-Không xác định}"
         fi
    else
         echo "Lỗi logic: Không xác định được hành động cụ thể cho index $index."
         return 1
    fi

    echo "-------------------------------------------------------------------------"
    # read -rp "Nhấn Enter để quay lại menu..."
}


echo "${quan_ly_reboot_service:-Quản lý Reboot Service}:"
# Mảng options cơ bản (sử dụng biến ngôn ngữ với fallback)
options=(
    "${khoi_dong_lai_litespeed_webserver:-Khởi động lại LiteSpeed-Webserver}" # Index 0
    "${khoi_dong_lai_maria_database:-Khởi động lại Maria-Database}"       # Index 1
    "${khoi_dong_lai_fail2ban:-Khởi động lại Fail2ban}"               # Index 2
    "${khoi_dong_lai_all_service:-Khởi động lại ALL-service}"           # Index 3
    "${khoi_dong_lai_may_chu:-Khởi động lại máy chủ}"                # Index 4
)
# Index tiềm năng tiếp theo: 5=lsmcd, 6=redis, 7=memcached, 8=csf, 9=nftables, 10=firewalld

# Thêm các tùy chọn động dựa trên sự tồn tại của dịch vụ
# Kiểm tra cẩn thận hơn sự tồn tại của dịch vụ trong systemd
if [[ -d /usr/local/lsmcd ]] && systemctl list-units --full -all | grep -q 'lsmcd.service'; then
    options+=("${khoi_dong_lai_lsmemcached:-Khởi động lại LSMemcached}") # Index 5 tiềm năng
fi
if [[ -f /etc/redis.conf ]] && systemctl list-units --full -all | grep -q 'redis.service'; then
    options+=("${khoi_dong_lai_redis:-Khởi động lại Redis}") # Index 6 tiềm năng
fi
if [[ -f /etc/sysconfig/memcached ]] && systemctl list-units --full -all | grep -q 'memcached.service'; then
    options+=("${khoi_dong_lai_memcached:-Khởi động lại Memcached}") # Index 7 tiềm năng
fi
if command -v csf &> /dev/null; then
    options+=("${khoi_dong_lai_csf:-Khởi động lại CSF}") # Index 8 tiềm năng
fi
if systemctl list-units --full -all | grep -q 'nftables.service'; then
     options+=("${khoi_dong_lai_nftables:-Khởi động lại Nftables}") # Index 9 tiềm năng
fi
if systemctl list-units --full -all | grep -q 'firewalld.service'; then
     options+=("${khoi_dong_lai_firewalld:-Khởi động lại Firewalld}") # Index 10 tiềm năng
fi


# --- Vòng lặp Menu Tương tác ---
fzf_installed=false
if command -v fzf &>/dev/null; then
    fzf_installed=true
fi

# Đặt PS3 dựa trên việc fzf có được cài đặt hay không
# Lưu ý: ${#options[@]} sẽ phản ánh số lượng tùy chọn thực tế được hiển thị
if $fzf_installed; then
    PS3="
$(tput setab 0)${nhap_lua_chon_cua_ban} (1-${#options[@]}) [00=${chon_nhanh}] [0=${exit_thoat}]:$(tput sgr0) "
else
    PS3="
$(tput setab 0)${nhap_lua_chon_cua_ban} (1-${#options[@]}) [0=${exit_thoat}]:$(tput sgr0) "
fi

echo ""
echo ""
# Sử dụng biến ngôn ngữ cho tiêu đề menu
echo ""

# Sử dụng select để hiển thị menu động
select opt in "${options[@]}"; do
    case $REPLY in
        0) # Thoát/Quay lại menu chính
            echo "Đang quay lại menu quản lý service..."
            . /etc/wptt/wptt-service-main 1
            break # Thoát khỏi vòng lặp select của menu con này
            ;;

        00) # Gọi FZF (chỉ khi đã cài đặt)
            if $fzf_installed; then
                fzf_height=$(( ${#options[@]} + 4 ))
                [[ $fzf_height -gt 15 ]] && fzf_height=15 # Giới hạn chiều cao
                fzf_prompt="${nhap_lua_chon_cua_ban} (Mũi tên di chuyển, Enter chọn, ESC hủy): "

                # Hiển thị các tùy chọn thực tế trong FZF
                selected_opt=$(printf '%s\n' "${options[@]}" | nl -w 3 -s ': ' | fzf --prompt="$fzf_prompt" --height="$fzf_height" --border --cycle --reverse)
                fzf_exit_status=$?
                selected_opt=$(echo "$selected_opt" | sed 's/^[[:space:]]*[0-9]\+\:[[:space:]]*//')

                if [[ $fzf_exit_status -eq 0 ]] && [[ -n "$selected_opt" ]]; then
                    selected_index=-1
                    # Tìm index dựa trên TEXT của tùy chọn đã chọn trong mảng options HIỆN TẠI
                    for i in "${!options[@]}"; do
                        # So sánh chính xác, bỏ khoảng trắng cuối dòng
                        if [[ "$(echo -n "${options[$i]}" | sed 's/[[:space:]]*$//')" == "$(echo -n "$selected_opt" | sed 's/[[:space:]]*$//')" ]]; then
                            selected_index=$i
                            break
                        fi
                    done

                    if [[ $selected_index -ne -1 ]]; then
                         # echo "Đã chọn (FZF): ${options[$selected_index]}"
                         # Xác định index "cố định" tương ứng với lựa chọn động
                         # Đây là phần phức tạp nhất nếu không muốn sửa run_action
                         # Ví dụ logic ánh xạ thủ công (dễ lỗi và khó bảo trì):
                         fixed_index=-1
                         option_text_selected="${options[$selected_index]}"
                         if [[ "$option_text_selected" == *LiteSpeed* ]]; then fixed_index=0
                         elif [[ "$option_text_selected" == *Maria* ]]; then fixed_index=1
                         elif [[ "$option_text_selected" == *Fail2ban* ]]; then fixed_index=2
                         elif [[ "$option_text_selected" == *ALL-service* ]]; then fixed_index=3
                         elif [[ "$option_text_selected" == *máy*chủ* ]]; then fixed_index=4 # Tiếng Việt có dấu
                         elif [[ "$option_text_selected" == *LSMemcached* ]]; then fixed_index=5
                         elif [[ "$option_text_selected" == *Redis* ]]; then fixed_index=6
                         elif [[ "$option_text_selected" == *Memcached* ]]; then fixed_index=7
                         elif [[ "$option_text_selected" == *CSF* ]]; then fixed_index=8
                         elif [[ "$option_text_selected" == *Nftables* ]]; then fixed_index=9
                         elif [[ "$option_text_selected" == *Firewalld* ]]; then fixed_index=10
                         fi

                         if [[ $fixed_index -ne -1 ]]; then
                              run_action "$fixed_index" # Gọi run_action với index cố định
                         else
                              echo "Lỗi: Không thể ánh xạ lựa chọn động sang index cố định."
                         fi
                    else
                        echo "Lỗi: Không thể khớp lựa chọn FZF '$selected_opt' với danh sách."
                    fi
                else
                    echo "${vui_long_chon_lai}"
                fi
            else
                 echo "${lua_chon_khong_hop_le}: '00'. FZF chưa được cài đặt."
            fi
            REPLY=""
            continue
            ;;

        *) # Xử lý nhập số hoặc nhập không hợp lệ
            # Kiểm tra số nhập vào với số lượng tùy chọn THỰC TẾ được hiển thị
            if [[ "$REPLY" =~ ^[1-9][0-9]*$ ]] && [ "$REPLY" -ge 1 ] && [ "$REPLY" -le ${#options[@]} ]; then
                # Lấy index 0-based từ số người dùng nhập (1-based)
                action_index_dynamic=$((REPLY - 1))
                # echo "Đã chọn (Số): ${options[$action_index_dynamic]}"

                # Tương tự FZF, cần ánh xạ index động sang index cố định
                fixed_index=-1
                option_text_selected="${options[$action_index_dynamic]}"
                if [[ "$option_text_selected" == *LiteSpeed* ]]; then fixed_index=0
                elif [[ "$option_text_selected" == *Maria* ]]; then fixed_index=1
                elif [[ "$option_text_selected" == *Fail2ban* ]]; then fixed_index=2
                elif [[ "$option_text_selected" == *ALL-service* ]]; then fixed_index=3
                elif [[ "$option_text_selected" == *máy*chủ* ]]; then fixed_index=4
                elif [[ "$option_text_selected" == *LSMemcached* ]]; then fixed_index=5
                elif [[ "$option_text_selected" == *Redis* ]]; then fixed_index=6
                elif [[ "$option_text_selected" == *Memcached* ]]; then fixed_index=7
                elif [[ "$option_text_selected" == *CSF* ]]; then fixed_index=8
                elif [[ "$option_text_selected" == *Nftables* ]]; then fixed_index=9
                elif [[ "$option_text_selected" == *Firewalld* ]]; then fixed_index=10
                fi

                 if [[ $fixed_index -ne -1 ]]; then
                      run_action "$fixed_index" # Gọi run_action với index cố định
                 else
                      echo "Lỗi: Không thể ánh xạ lựa chọn động sang index cố định."
                 fi
            else
                echo "${lua_chon_khong_hop_le}: '$REPLY'. ${vui_long_chon_lai}"
            fi
            REPLY=""
            continue
            ;;
    esac
done

# Script kết thúc sau khi break khỏi vòng lặp
