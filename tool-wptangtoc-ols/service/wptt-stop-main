#!/bin/bash
# @author: Gia Tuấn
# @website: https://wptangtoc.com
# @email: giatuan@wptangtoc.com
# @since: 2025

function huong_dan() {
  WPTangToc OLS, bộ script tối ưu hóa việc cài đặt và quản trị máy chủ web cũng cung cấp tính năng quản lý việc dừng [stop] các dịch vụ một cách tiện lợi.

  Giới thiệu ngắn gọn về quản lý stop service trong WPTangToc OLS:

  * Giao diện quản lý tập trung: Giống như các thao tác khởi động [start] hay khởi động lại [reboot], WPTangToc OLS tích hợp chức năng dừng dịch vụ trong một mục quản lý chung, thường được đặt tên là Quản lý Service Application hoặc tương tự trong menu chính.
  * Đơn giản hóa thao tác: Thay vì phải dùng các lệnh phức tạp của Linux để dừng một dịch vụ [ví dụ: sudo systemctl stop lsws để dừng OpenLiteSpeed], người dùng có thể thực hiện việc này thông qua vài lựa chọn đơn giản ngay trong menu của WPTangToc OLS. Điều này đặc biệt hữu ích cho người dùng không quen với dòng lệnh.

  Dừng các dịch vụ cụ thể: WPTangToc OLS cho phép bạn chủ động dừng các dịch vụ quan trọng của webserver khi cần thiết, ví dụ như:
  * OpenLiteSpeed [lsws]: Dịch vụ webserver.
  * MariaDB/MySQL: Dịch vụ cơ sở dữ liệu.
  * Redis/Memcached: Dịch vụ object cache.
  * Fail2ban: Dịch vụ đọc log chặn IP.
  * CSF: Tường lửa.
  * Firewalld: Tường lửa.
  * Các dịch vụ khác đang chạy trên máy chủ.

  Tóm lại, WPTangToc OLS cung cấp một phương thức trực quan và dễ sử dụng để dừng các dịch vụ trên máy chủ OpenLiteSpeed, giúp người quản trị kiểm soát tốt hơn hoạt động của server mà không cần phải ghi nhớ nhiều lệnh phức tạp.
}

. /etc/wptt/.wptt.conf
if [[ $ngon_ngu = '' ]]; then
  ngon_ngu='vi'
fi
. /etc/wptt/lang/$ngon_ngu.sh
. /etc/wptt/echo-color

echo ""
echo ""
echo "$stop_bat_service_application"
echo ""

# --- Mảng Tùy chọn (options) ---
# Đã cập nhật với các dịch vụ mới và tùy chọn "All" cho hành động DỪNG
options=(
  "${stop_mariadb:-Dừng MariaDB}"             # Index 0
  "${stop_lsws:-Dừng LiteSpeed}"              # Index 1
  "${stop_nftables:-Dừng Nftables}"           # Index 2
  "${stop_csf:-Dừng CSF Firewall}"            # Index 3
  "${stop_firewalld:-Dừng Firewalld}"         # Index 4
  "${stop_sshd:-Dừng SSHd (CẨN THẬN!)}"       # Index 5 - Thêm cảnh báo
  "${stop_fail2ban:-Dừng Fail2ban}"           # Index 6
  "${stop_memcached:-Dừng Memcached}"         # Index 7
  "${stop_lsmcd:-Dừng LSMCD (LS Memcached)}"  # Index 8
  "${stop_redis:-Dừng Redis}"                 # Index 9
  "${stop_all_services:-Dừng TẤT CẢ Dịch vụ}" # Index 10
)

# --- Hàm Helper: Chứa logic kiểm tra và DỪNG thực tế ---
_stop_service() {
  local service_name="$1"
  local display_name="$2"
  local check_command="$3"
  local is_csf=${4:-false}

  local not_found=false
  if [[ "$is_csf" = true ]]; then
    if ! command -v csf &>/dev/null; then not_found=true; fi
  elif [[ -n "$check_command" ]]; then
    if ! command -v "$check_command" &>/dev/null; then not_found=true; fi
  # Kiểm tra trạng thái active trước khi dừng có thể hữu ích, nhưng để đơn giản, ta vẫn kiểm tra tồn tại unit
  elif ! systemctl list-units --full --all | grep -Fq "$service_name"; then
    not_found=true
  fi

  if $not_found; then
    # Không in lỗi nếu không tìm thấy, chỉ return 1 để logic "All" bỏ qua
    # printf "$dich_vu_khong_tim_thay" "$display_name" >&2
    return 1 # Chỉ trả về mã lỗi nếu không tìm thấy
  fi

  # Chỉ in thông báo và thực hiện nếu dịch vụ được tìm thấy
  printf "$dang_dung" "$display_name"
  local success=false
  _runing "Dừng $service_name"
  if [[ "$is_csf" = true ]]; then
    # Sử dụng 'csf -x' để dừng và vô hiệu hóa CSF hoàn toàn
    if csf -x &>/dev/null; then success=true; fi # Ẩn output của csf -x
  else
    # Sử dụng 'systemctl stop' để dừng dịch vụ
    if systemctl stop "$service_name"; then success=true; fi
  fi

  if $success; then
    _rundone "Dừng $service_name"
    #printf "$dung_thanh_cong" "$display_name"
  else
    _runloi "Dừng $service_name"
    #printf "$dung_that_bai" "$display_name" >&2
  fi
  echo ""
  [[ "$success" = true ]] && return 0 || return 1
}

# --- Hàm THỰC HIỆN hành động dựa trên index ---
# Đã cập nhật với các dịch vụ mới và tùy chọn "All" cho hành động DỪNG
_perform_action() {
  local index=$1
  local ret_code=0
  case $index in
  0) _stop_service "mariadb.service" "${stop_mariadb:-MariaDB}" "mysql" ;;
  1) _stop_service "lsws.service" "${stop_lsws:-LiteSpeed}" "/usr/local/lsws/bin/lswsctrl" ;;
  2) _stop_service "nftables.service" "${stop_nftables:-Nftables}" "nft" ;;
  3) _stop_service "csf.service" "${stop_csf:-CSF Firewall}" "csf" true ;;
  4) _stop_service "firewalld.service" "${stop_firewalld:-Firewalld}" "firewall-cmd" ;;
  5) # Cảnh báo thêm trước khi dừng SSH
    echoWarn "CẢNH BÁO: Dừng SSHd sẽ ngắt kết nối hiện tại của bạn và ngăn các kết nối SSH mới!"
    read -p "Bạn có chắc chắn muốn tiếp tục? (y/N): " confirm_stop_ssh
    if [[ "${confirm_stop_ssh,,}" == "y" ]]; then
      _stop_service "sshd.service" "${stop_sshd:-SSHd}" "sshd"
    else
      echoInfo "Đã hủy dừng SSHd."
      ret_code=1 # Coi như là lỗi hoặc hành động bị hủy
    fi
    ;;
  6) _stop_service "fail2ban.service" "${stop_fail2ban:-Fail2ban}" "fail2ban-client" ;;
  7) _stop_service "memcached.service" "${stop_memcached:-Memcached}" "memcached" ;;
  8) _stop_service "lsmcd.service" "${stop_lsmcd:-LSMCD}" "lsmcd" ;;
  9) _stop_service "redis-server.service" "${stop_redis:-Redis}" "redis-server" ;; # Kiểm tra tên service nếu cần
  10)                                                                              # Dừng TẤT CẢ
    printf "$dang_dung_tat_ca"
    echoDo "--------------------------------------------------" # Thêm phân cách
    # Gọi lại hàm _stop_service cho từng dịch vụ
    # Hàm _stop_service đã có kiểm tra cài đặt bên trong
    _stop_service "mariadb.service" "${stop_mariadb:-MariaDB}" "mysql"
    _stop_service "lsws.service" "${stop_lsws:-LiteSpeed}" "/usr/local/lsws/bin/lswsctrl"
    _stop_service "nftables.service" "${stop_nftables:-Nftables}" "nft"
    _stop_service "csf.service" "${stop_csf:-CSF Firewall}" "csf" true
    _stop_service "firewalld.service" "${stop_firewalld:-Firewalld}" "firewall-cmd"
    # Không tự động dừng SSHd trong tùy chọn "All" để tránh mất kết nối đột ngột
    # _stop_service "sshd.service" "${stop_sshd:-SSHd}" "sshd"
    echoWarn "Bỏ qua việc dừng SSHd trong tùy chọn 'Dừng TẤT CẢ' để tránh mất kết nối."
    _stop_service "fail2ban.service" "${stop_fail2ban:-Fail2ban}" "fail2ban-client"
    _stop_service "memcached.service" "${stop_memcached:-Memcached}" "memcached"
    _stop_service "lsmcd.service" "${stop_lsmcd:-LSMCD}" "lsmcd"
    _stop_service "redis-server.service" "${stop_redis:-Redis}" "redis-server"
    echoDo "--------------------------------------------------" # Thêm phân cách
    printf "$hoan_tat_dung_tat_ca"
    ret_code=0 # Giả định thành công vì lỗi từng dịch vụ đã được báo cáo
    ;;
  *)
    printf "${lua_chon_khong_hop_le:-Lựa chọn không hợp lệ}: Index '%s'.\n" "$index" >&2
    ret_code=1
    ;;
  esac
  # Trả về mã lỗi cuối cùng (quan trọng cho trường hợp không phải "All")
  # Ngoại trừ trường hợp dừng SSH bị hủy (đã đặt ret_code=1)
  if [[ "$index" -ne 10 && "$index" -ne 5 ]]; then
    _stop_service_ret=$?
    # Chỉ cập nhật ret_code nếu _stop_service thất bại (trả về khác 0)
    [[ $_stop_service_ret -ne 0 ]] && ret_code=$_stop_service_ret
  # Xử lý trường hợp dừng SSH thành công hoặc thất bại
  elif [[ "$index" -eq 5 && "${confirm_stop_ssh,,}" == "y" ]]; then
    _stop_service_ret=$?
    [[ $_stop_service_ret -ne 0 ]] && ret_code=$_stop_service_ret
  fi

  return $ret_code
}

# --- Hàm run_action (QUAN TRỌNG cho bộ phân tích của WPTangToc) ---
# Giữ nguyên cấu trúc để tương thích, nhưng logic bên trong _perform_action đã thay đổi thành STOP
run_action() {
  local index=$1
  # LƯU Ý: Tên file script vẫn giữ là 'wptt-reboot-main'.
  # Trong thực tế, bạn có thể muốn đổi tên file thành 'wptt-stop-main'
  # và cập nhật đường dẫn này cũng như các nơi gọi nó trong WPTangToc.
  local script_path="/etc/wptt/service/wptt-stop-main" # Giữ nguyên tên file để tương thích
  local script_args="$index"                           # Tham số là index tương ứng

  # Cấu trúc case này là BẮT BUỘC cho bộ phân tích của wptangtoc
  case $index in
  0)
    script_path="/etc/wptt/service/wptt-stop-main"
    script_args="0"
    ;;
  1)
    script_path="/etc/wptt/service/wptt-stop-main"
    script_args="1"
    ;;
  2)
    script_path="/etc/wptt/service/wptt-stop-main"
    script_args="2"
    ;;
  3)
    script_path="/etc/wptt/service/wptt-stop-main"
    script_args="3"
    ;;
  4)
    script_path="/etc/wptt/service/wptt-stop-main"
    script_args="4"
    ;;
  5)
    script_path="/etc/wptt/service/wptt-stop-main"
    script_args="5"
    ;;
  6)
    script_path="/etc/wptt/service/wptt-stop-main"
    script_args="6"
    ;;
  7)
    script_path="/etc/wptt/service/wptt-stop-main"
    script_args="7"
    ;;
  8)
    script_path="/etc/wptt/service/wptt-stop-main"
    script_args="8"
    ;;
  9)
    script_path="/etc/wptt/service/wptt-stop-main"
    script_args="9"
    ;;
  10)
    script_path="/etc/wptt/service/wptt-stop-main"
    script_args="10"
    ;;
  *)
    script_path="/bin/false"
    script_args=""
    echo "${lua_chon_khong_hop_le:-Lựa chọn không hợp lệ}: Index $index." >&2
    # return 1 # Không cần thiết
    ;;
  esac

  # Gọi hàm thực hiện hành động thực tế (đã đổi thành STOP)
  _perform_action "$index"
  return $? # Trả về mã lỗi từ _perform_action
}

if [[ $1 = '98' ]]; then
  [[ -f /etc/wptt/wptt-callback-menu-chon ]] && . /etc/wptt/wptt-callback-menu-chon
fi

# --- Logic Thực thi Chính ---
if [[ -n "$1" && "$1" =~ ^[0-9]+$ ]]; then
  _perform_action "$1"
  exit $?
fi

# --- Chạy Độc Lập ---
if [[ -z "$1" ]]; then
  [[ -f /etc/wptt/wptt-header-menu ]] && . /etc/wptt/wptt-header-menu && header_menu
else
  echoDo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
fi

echo ""
echo "${dung_dich_vu:-Dừng Dịch vụ Hệ thống}:" # Cập nhật tiêu đề chính
echo ""

# Giả sử phần còn lại của menu (hiển thị tùy chọn, đọc input) do WPTangToc xử lý
# Dựa trên cấu trúc của script gốc.
