#!/bin/bash
# @author: Gia Tuấn
# @website: https://wptangtoc.com
# @email: giatuan@wptangtoc.com
# @since: 2025

function huong_dan() {
  WPTangToc OLS được thiết kế để đơn giản hóa việc cài đặt và quản lý máy chủ web, đặc biệt cho các trang web WordPress. Việc quản lý các dịch vụ [services] của máy chủ, bao gồm cả việc khởi động [start] chúng, là một phần quan trọng trong các tính năng của WPTangToc OLS.

  Giới thiệu ngắn gọn về quản lý start service trong WPTangToc OLS:

  * Giao diện quản lý tập trung: Tương tự như việc reboot hay stop service, WPTangToc OLS thường cung cấp một mục quản lý dịch vụ chuyên biệt trong menu chính của nó, có thể được gọi là Quản lý Service Application hoặc một tên tương tự. Thông qua giao diện này, người dùng có thể thực hiện thao tác khởi động các dịch vụ cần thiết của webserver.
  * Đơn giản hóa thao tác: Thay vì phải sử dụng các lệnh Linux truyền thống để khởi động dịch vụ [ví dụ: sudo systemctl start lsws để khởi động OpenLiteSpeed], WPTangToc OLS cho phép người dùng thực hiện điều này thông qua vài lựa chọn đơn giản trong menu của nó. Điều này giúp người dùng, kể cả những người không chuyên sâu về kỹ thuật, cũng có thể dễ dàng quản lý máy chủ.

  Khởi động các dịch vụ cụ thể: WPTangToc OLS cho phép bạn chủ động dừng các dịch vụ quan trọng của webserver khi cần thiết, ví dụ như:
  * OpenLiteSpeed [lsws]: Dịch vụ webserver.
  * MariaDB/MySQL: Dịch vụ cơ sở dữ liệu.
  * Redis/Memcached: Dịch vụ object cache.
  * Fail2ban: Dịch vụ đọc log chặn IP.
  * CSF: Tường lửa.
  * Firewalld: Tường lửa.
  * Các dịch vụ khác đang chạy trên máy chủ.

  Tóm lại, WPTangToc OLS giúp việc khởi động các dịch vụ trên máy chủ trở nên trực quan và dễ dàng hơn, thông qua một menu quản lý tập trung, giúp người dùng tiết kiệm thời gian và giảm thiểu sai sót so với việc sử dụng dòng lệnh thuần túy.
}

. /etc/wptt/.wptt.conf
if [[ $ngon_ngu = '' ]]; then
  ngon_ngu='vi'
fi
. /etc/wptt/lang/$ngon_ngu.sh
. /etc/wptt/echo-color

echo ""
echo ""
echo "$start_bat_service_application"
echo ""
# --- Mảng Tùy chọn (options) ---
# Đã cập nhật với các dịch vụ mới và tùy chọn "All" cho hành động KHỞI ĐỘNG
options=(
  "${start_mariadb:-Khởi động MariaDB}"             # Index 0
  "${start_lsws:-Khởi động LiteSpeed}"              # Index 1
  "${start_nftables:-Khởi động Nftables}"           # Index 2
  "${start_csf:-Khởi động CSF Firewall}"            # Index 3
  "${start_firewalld:-Khởi động Firewalld}"         # Index 4
  "${start_sshd:-Khởi động SSHd}"                   # Index 5
  "${start_fail2ban:-Khởi động Fail2ban}"           # Index 6
  "${start_memcached:-Khởi động Memcached}"         # Index 7
  "${start_lsmcd:-Khởi động LSMCD (LS Memcached)}"  # Index 8
  "${start_redis:-Khởi động Redis}"                 # Index 9
  "${start_all_services:-Khởi động TẤT CẢ Dịch vụ}" # Index 10
)

# --- Hàm Helper: Chứa logic kiểm tra và KHỞI ĐỘNG thực tế ---
_start_service() {
  local service_name="$1"
  local display_name="$2"
  local check_command="$3"
  local is_csf=${4:-false}

  local not_found=false
  if [[ "$is_csf" = true ]]; then
    # Kiểm tra CSF tồn tại
    if ! command -v csf &>/dev/null; then not_found=true; fi
  elif [[ -n "$check_command" ]]; then
    # Kiểm tra lệnh liên quan tồn tại
    if ! command -v "$check_command" &>/dev/null; then not_found=true; fi
  # Kiểm tra unit systemd tồn tại
  elif ! systemctl list-unit-files --full --all | grep -Fq "$service_name"; then
    # Nếu không tìm thấy unit file, có thể dịch vụ chưa được cài hoặc tên sai
    not_found=true
  fi

  if $not_found; then
    # Không in lỗi nếu không tìm thấy, chỉ return 1 để logic "All" bỏ qua
    # printf "$dich_vu_khong_tim_thay" "$display_name" >&2
    return 1 # Chỉ trả về mã lỗi nếu không tìm thấy
  fi

  # Chỉ in thông báo và thực hiện nếu dịch vụ được tìm thấy
  printf "$dang_khoi_dong" "$display_name"
  local success=false
  _runing "Khởi động $service_name"
  if [[ "$is_csf" = true ]]; then
    # Sử dụng 'csf -e' để kích hoạt CSF và LFD (nếu chưa chạy)
    if csf -e &>/dev/null; then success=true; fi # Ẩn output của csf -e
  else
    # Sử dụng 'systemctl start' để khởi động dịch vụ
    if systemctl start "$service_name"; then success=true; fi
  fi

  if $success; then
    _rundone "Khởi động $service_name"
    #printf "$khoi_dong_thanh_cong" "$display_name"
  else
    _runloi "Khởi động $service_name"
    #printf "$khoi_dong_that_bai" "$display_name" >&2
  fi
  echo ""
  [[ "$success" = true ]]
}

# --- Hàm THỰC HIỆN hành động dựa trên index ---
# Đã cập nhật với các dịch vụ mới và tùy chọn "All" cho hành động KHỞI ĐỘNG
_perform_action() {
  local index=$1
  local ret_code=0
  case $index in
  0) _start_service "mariadb.service" "${start_mariadb:-MariaDB}" "mysql" ;;
  1) _start_service "lsws.service" "${start_lsws:-LiteSpeed}" "/usr/local/lsws/bin/lswsctrl" ;;
  2) _start_service "nftables.service" "${start_nftables:-Nftables}" "nft" ;;
  3) _start_service "csf.service" "${start_csf:-CSF Firewall}" "csf" true ;;
  4) _start_service "firewalld.service" "${start_firewalld:-Firewalld}" "firewall-cmd" ;;
  5) _start_service "sshd.service" "${start_sshd:-SSHd}" "sshd" ;; # Không cần xác nhận khi start
  6) _start_service "fail2ban.service" "${start_fail2ban:-Fail2ban}" "fail2ban-client" ;;
  7) _start_service "memcached.service" "${start_memcached:-Memcached}" "memcached" ;;
  8) _start_service "lsmcd.service" "${start_lsmcd:-LSMCD}" "lsmcd" ;;
  9) _start_service "redis-server.service" "${start_redis:-Redis}" "redis-server" ;; # Kiểm tra tên service nếu cần
  10)                                                                                # Khởi động TẤT CẢ
    printf "$dang_khoi_dong_tat_ca"
    echoDo "--------------------------------------------------" # Thêm phân cách
    # Gọi lại hàm _start_service cho từng dịch vụ
    # Hàm _start_service đã có kiểm tra cài đặt bên trong
    _start_service "mariadb.service" "${start_mariadb:-MariaDB}" "mysql"
    _start_service "lsws.service" "${start_lsws:-LiteSpeed}" "/usr/local/lsws/bin/lswsctrl"
    _start_service "nftables.service" "${start_nftables:-Nftables}" "nft"
    _start_service "csf.service" "${start_csf:-CSF Firewall}" "csf" true
    _start_service "firewalld.service" "${start_firewalld:-Firewalld}" "firewall-cmd"
    _start_service "sshd.service" "${start_sshd:-SSHd}" "sshd" # Khởi động cả SSH
    _start_service "fail2ban.service" "${start_fail2ban:-Fail2ban}" "fail2ban-client"
    _start_service "memcached.service" "${start_memcached:-Memcached}" "memcached"
    _start_service "lsmcd.service" "${start_lsmcd:-LSMCD}" "lsmcd"
    _start_service "redis-server.service" "${start_redis:-Redis}" "redis-server"
    echoDo "--------------------------------------------------" # Thêm phân cách
    printf "$hoan_tat_khoi_dong_tat_ca"
    ret_code=0 # Giả định thành công vì lỗi từng dịch vụ đã được báo cáo
    ;;
  *)
    printf "${lua_chon_khong_hop_le:-Lựa chọn không hợp lệ}: Index '%s'.\n" "$index" >&2
    ret_code=1
    ;;
  esac
  # Trả về mã lỗi cuối cùng (quan trọng cho trường hợp không phải "All")
  if [[ "$index" -ne 10 ]]; then
    _start_service_ret=$?
    # Chỉ cập nhật ret_code nếu _start_service thất bại (trả về khác 0)
    [[ $_start_service_ret -ne 0 ]] && ret_code=$_start_service_ret
  fi

  return $ret_code
}

# --- Hàm run_action (QUAN TRỌNG cho bộ phân tích của WPTangToc) ---
# Đã cập nhật đường dẫn script thành wptt-start-main
run_action() {
  local index=$1
  # Đường dẫn tới script này (hoặc script thực thi hành động khởi động)
  local script_path="/etc/wptt/service/wptt-start-main" # Đã cập nhật
  local script_args="$index"                            # Tham số là index tương ứng

  # Cấu trúc case này là BẮT BUỘC cho bộ phân tích của wptangtoc
  # Cập nhật script_path trong tất cả các case
  case $index in
  0)
    script_path="/etc/wptt/service/wptt-start-main"
    script_args="0"
    ;;
  1)
    script_path="/etc/wptt/service/wptt-start-main"
    script_args="1"
    ;;
  2)
    script_path="/etc/wptt/service/wptt-start-main"
    script_args="2"
    ;;
  3)
    script_path="/etc/wptt/service/wptt-start-main"
    script_args="3"
    ;;
  4)
    script_path="/etc/wptt/service/wptt-start-main"
    script_args="4"
    ;;
  5)
    script_path="/etc/wptt/service/wptt-start-main"
    script_args="5"
    ;;
  6)
    script_path="/etc/wptt/service/wptt-start-main"
    script_args="6"
    ;;
  7)
    script_path="/etc/wptt/service/wptt-start-main"
    script_args="7"
    ;;
  8)
    script_path="/etc/wptt/service/wptt-start-main"
    script_args="8"
    ;;
  9)
    script_path="/etc/wptt/service/wptt-start-main"
    script_args="9"
    ;;
  10)
    script_path="/etc/wptt/service/wptt-start-main"
    script_args="10"
    ;;
  *)
    script_path="/bin/false"
    script_args=""
    echo "${lua_chon_khong_hop_le:-Lựa chọn không hợp lệ}: Index $index." >&2
    # return 1 # Không cần thiết
    ;;
  esac

  # Gọi hàm thực hiện hành động thực tế (đã đổi thành START)
  _perform_action "$index"
  return $? # Trả về mã lỗi từ _perform_action
}

# --- Xử lý gọi trực tiếp hoặc callback từ WPTT ---
if [[ $1 = '98' ]]; then
  # Xử lý callback đặc biệt nếu có
  [[ -f /etc/wptt/wptt-callback-menu-chon ]] && . /etc/wptt/wptt-callback-menu-chon
  # Thêm logic xử lý callback nếu cần
fi

# --- Logic Thực thi Chính ---
# Kiểm tra xem tham số đầu tiên có phải là số (chỉ số hành động) không
if [[ -n "$1" && "$1" =~ ^[0-9]+$ && "$1" != '98' ]]; then # Loại trừ mã callback '98'
  _perform_action "$1"
  exit $? # Thoát với mã trạng thái từ _perform_action
fi

# --- Chạy Độc Lập (hiển thị menu - nếu không có tham số hoặc là callback) ---
# Chỉ hiển thị header nếu chạy độc lập (không có tham số)
if [[ -z "$1" ]]; then
  # Hiển thị header chung của WPTangToc nếu có
  [[ -f /etc/wptt/wptt-header-menu ]] && . /etc/wptt/wptt-header-menu && header_menu
# Nếu có tham số nhưng không phải là số chỉ mục hợp lệ (ví dụ: gọi từ menu chính khác)
# thì không cần hiển thị lại header, chỉ cần in phân cách nếu cần
elif [[ "$1" != '98' ]]; then # Không in phân cách cho callback '98'
  echoDo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
fi

# Hiển thị tiêu đề chính của menu này (chỉ khi không thoát sớm do thực thi trực tiếp)
if [[ ! (-n "$1" && "$1" =~ ^[0-9]+$ && "$1" != '98') ]]; then
  echo ""
  echo "${khoi_dong_dich_vu:-Khởi động Dịch vụ Hệ thống}:" # Cập nhật tiêu đề chính
  echo ""
  # Phần hiển thị các tùy chọn trong mảng $options và đọc lựa chọn
  # của người dùng có lẽ được xử lý bởi một script khác trong WPTangToc
  # gọi lại script này với chỉ số được chọn làm tham số $1.
fi

# Mã thoát mặc định nếu không có hành động nào được thực thi trực tiếp
