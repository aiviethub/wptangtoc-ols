#!/bin/bash

find_default_python() {
  # 1. Check for `python3` first, as it's the recommended default.
  if command -v python3 &> /dev/null; then
    # Get the version string.  Handle possible errors.
    version_string=$(python3 --version 2>&1) # Redirect stderr to stdout
    if [[ $version_string == *"not found"* ]]; then
        : # Do nothing, python3 command failed.  Continue checking.
    elif [[ $version_string == "" ]]; then # --version may not be supported
        echo "python3"
        return 0
    else
      echo "python3"
      return 0
    fi
  fi

  # 2. Check for `python`.
  if command -v python &> /dev/null; then
     version_string=$(python --version 2>&1)
     if [[ $version_string == *"not found"* ]]; then
        :  #Do nothing
     elif [[ $version_string == "" ]]; then
         echo "python"
         return 0
     else
        echo "python"
        return 0
    fi
  fi

  # 3. Check for `python2` (least preferred).
    if command -v python2 &> /dev/null; then
     version_string=$(python2 --version 2>&1)
     if [[ $version_string == *"not found"* ]]; then
        :  #Do nothing
     elif [[ $version_string == "" ]]; then
        echo "python2"
        return 0
     else
       echo "python2"
       return 0
    fi
  fi
  return 1 # No Python found
}

get_python_version() {
    local pycmd="$1"
    if [[ -z "$pycmd" ]]; then
        echo "No Python command provided." >&2
        return 1
    fi

    version_string=$("$pycmd" --version 2>&1)  # Capture both stdout and stderr

    # Check for errors in the output (e.g., "command not found").
    if [[ $version_string == *"not found"* ]]; then
        echo "Error: '$pycmd' command not found or failed." >&2
        return 1
    fi

    # If --version is not supported, the version_string could be empty
    if [[ $version_string == "" ]]; then
       echo "Unknown (version could not be determined)"
       return 0
    fi

    # Extract and print the version. Using awk or cut for better compatibility.
    echo "$version_string" | awk '{print $2}'  # Usually the second word.

    return 0
}

python_version=$(find_default_python)

